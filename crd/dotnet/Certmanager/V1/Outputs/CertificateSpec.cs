// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Kubernetes.Types.Outputs.Certmanager.V1
{

    [OutputType]
    public sealed class CertificateSpec
    {
        /// <summary>
        /// CommonName is a common name to be used on the Certificate. The CommonName should have a length of 64 characters or fewer to avoid generating invalid CSRs. This value is ignored by TLS clients when any subject alt name is set. This is x509 behaviour: https://tools.ietf.org/html/rfc6125#section-6.4.4
        /// </summary>
        public readonly string CommonName;
        /// <summary>
        /// DNSNames is a list of DNS subjectAltNames to be set on the Certificate.
        /// </summary>
        public readonly ImmutableArray<string> DnsNames;
        /// <summary>
        /// The requested 'duration' (i.e. lifetime) of the Certificate. This option may be ignored/overridden by some issuer types. If unset this defaults to 90 days. If overridden and `renewBefore` is greater than the actual certificate duration, the certificate will be automatically renewed 2/3rds of the way through the certificate's duration.
        /// </summary>
        public readonly string Duration;
        /// <summary>
        /// EmailAddresses is a list of email subjectAltNames to be set on the Certificate.
        /// </summary>
        public readonly ImmutableArray<string> EmailAddresses;
        /// <summary>
        /// EncodeUsagesInRequest controls whether key usages should be present in the CertificateRequest
        /// </summary>
        public readonly bool EncodeUsagesInRequest;
        /// <summary>
        /// IPAddresses is a list of IP address subjectAltNames to be set on the Certificate.
        /// </summary>
        public readonly ImmutableArray<string> IpAddresses;
        /// <summary>
        /// IsCA will mark this Certificate as valid for certificate signing. This will automatically add the `cert sign` usage to the list of `usages`.
        /// </summary>
        public readonly bool IsCA;
        /// <summary>
        /// IssuerRef is a reference to the issuer for this certificate. If the `kind` field is not set, or set to `Issuer`, an Issuer resource with the given name in the same namespace as the Certificate will be used. If the `kind` field is set to `ClusterIssuer`, a ClusterIssuer with the provided name will be used. The `name` field in this stanza is required at all times.
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Certmanager.V1.CertificateSpecIssuerRef IssuerRef;
        /// <summary>
        /// Keystores configures additional keystore output formats stored in the `secretName` Secret resource.
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Certmanager.V1.CertificateSpecKeystores Keystores;
        /// <summary>
        /// Options to control private keys used for the Certificate.
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Certmanager.V1.CertificateSpecPrivateKey PrivateKey;
        /// <summary>
        /// The amount of time before the currently issued certificate's `notAfter` time that cert-manager will begin to attempt to renew the certificate. If unset this defaults to 30 days. If this value is greater than the total duration of the certificate (i.e. notAfter - notBefore), it will be automatically renewed 2/3rds of the way through the certificate's duration.
        /// </summary>
        public readonly string RenewBefore;
        /// <summary>
        /// revisionHistoryLimit is the maximum number of CertificateRequest revisions that are maintained in the Certificate's history. Each revision represents a single `CertificateRequest` created by this Certificate, either when it was created, renewed, or Spec was changed. Revisions will be removed by oldest first if the number of revisions exceeds this number. If set, revisionHistoryLimit must be a value of `1` or greater. If unset (`nil`), revisions will not be garbage collected. Default value is `nil`.
        /// </summary>
        public readonly int RevisionHistoryLimit;
        /// <summary>
        /// SecretName is the name of the secret resource that will be automatically created and managed by this Certificate resource. It will be populated with a private key and certificate, signed by the denoted issuer.
        /// </summary>
        public readonly string SecretName;
        /// <summary>
        /// Full X509 name specification (https://golang.org/pkg/crypto/x509/pkix/#Name).
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Certmanager.V1.CertificateSpecSubject Subject;
        /// <summary>
        /// URIs is a list of URI subjectAltNames to be set on the Certificate.
        /// </summary>
        public readonly ImmutableArray<string> Uris;
        /// <summary>
        /// Usages is the set of x509 usages that are requested for the certificate. Defaults to `digital signature` and `key encipherment` if not specified.
        /// </summary>
        public readonly ImmutableArray<string> Usages;

        [OutputConstructor]
        private CertificateSpec(
            string commonName,

            ImmutableArray<string> dnsNames,

            string duration,

            ImmutableArray<string> emailAddresses,

            bool encodeUsagesInRequest,

            ImmutableArray<string> ipAddresses,

            bool isCA,

            Pulumi.Kubernetes.Types.Outputs.Certmanager.V1.CertificateSpecIssuerRef issuerRef,

            Pulumi.Kubernetes.Types.Outputs.Certmanager.V1.CertificateSpecKeystores keystores,

            Pulumi.Kubernetes.Types.Outputs.Certmanager.V1.CertificateSpecPrivateKey privateKey,

            string renewBefore,

            int revisionHistoryLimit,

            string secretName,

            Pulumi.Kubernetes.Types.Outputs.Certmanager.V1.CertificateSpecSubject subject,

            ImmutableArray<string> uris,

            ImmutableArray<string> usages)
        {
            CommonName = commonName;
            DnsNames = dnsNames;
            Duration = duration;
            EmailAddresses = emailAddresses;
            EncodeUsagesInRequest = encodeUsagesInRequest;
            IpAddresses = ipAddresses;
            IsCA = isCA;
            IssuerRef = issuerRef;
            Keystores = keystores;
            PrivateKey = privateKey;
            RenewBefore = renewBefore;
            RevisionHistoryLimit = revisionHistoryLimit;
            SecretName = secretName;
            Subject = subject;
            Uris = uris;
            Usages = usages;
        }
    }
}
